{"version":3,"sources":["components/Button.js","components/LandingPage.js","components/MainPageComponents/Ginger.js","components/MainPageComponents/Ginseng.js","components/MainPageComponents/Kombucha.js","components/MainPageComponents/Kapalabhati.js","components/MainPage.js","components/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","type","onClick","buttonName","LandingPage","history","useHistory","className","push","Ginger","Ginseng","Kombucha","Kapalabhati","MainPage","to","path","NoMatch","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRASeA,EAPA,SAACC,GAEZ,OACI,4BAAQC,KAAK,SAASC,QAASF,EAAME,SAAUF,EAAMG,aCW9CC,EAXK,WAClB,IAAMC,EAAUC,cAEhB,OACE,yBAAKC,UAAU,gBACb,wBAAIA,UAAU,WAAd,oCACA,kBAAC,EAAD,CAAQJ,WAAY,gBAAiBD,QAAS,kBAAMG,EAAQG,KAAK,cCHxDC,EANA,WACX,OACI,uBAAGF,UAAU,qBAAb,0BCIOG,EANC,WACZ,OACI,uBAAGH,UAAU,qBAAb,uCCIOI,EANE,WACb,OACI,uBAAGJ,UAAU,qBAAb,2CCIOK,EANK,WAChB,OACI,uBAAGL,UAAU,qBAAb,2BCyCOM,EAnCE,WACjB,IAAMR,EAAUC,cAEd,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,WAAd,+DACA,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMO,GAAG,eAAeP,UAAU,iBAAlC,UACA,kBAAC,IAAD,CAAMO,GAAG,gBAAgBP,UAAU,iBAAnC,WACA,kBAAC,IAAD,CAAMO,GAAG,iBAAiBP,UAAU,iBAApC,YACA,kBAAC,IAAD,CAAMO,GAAG,oBAAoBP,UAAU,iBAAvC,gBAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAK,gBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,iBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,kBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,qBACV,kBAAC,EAAD,QAIJ,kBAAC,EAAD,CAAQZ,WAAY,2BAA4BD,QAAS,kBAAMG,EAAQG,KAAK,eCtBrEQ,EAZC,WACZ,IAAMX,EAAUC,cAEhB,OACI,yBAAKC,UAAU,YACX,8CACA,kBAAC,EAAD,CAAQJ,WAAY,gBAAiBD,QAAS,kBAAMG,EAAQG,KAAK,cCe9DS,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,UCPQG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b49bf4c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\r\n    return (\r\n        <button type=\"button\" onClick={props.onClick}>{props.buttonName}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport Button from './Button'\r\n\r\nconst LandingPage = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"landing-page\">\r\n      <h1 className=\"title-h\">You are on my experimental page!</h1>\r\n      <Button buttonName={'Check it out!'} onClick={() => history.push('/main')} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\r\n\r\nconst Ginger = () => {\r\n    return (\r\n        <p className=\"main-page-content\">Ginger root is yummy.</p>\r\n    );\r\n}\r\n\r\nexport default Ginger;\r\n","import React from 'react';\r\n\r\nconst Ginseng = () => {\r\n    return (\r\n        <p className=\"main-page-content\">Ginzeng, az ero bennem megin zeng.</p>\r\n    );\r\n}\r\n\r\nexport default Ginseng;\r\n","import React from 'react';\r\n\r\nconst Kombucha = () => {\r\n    return (\r\n        <p className=\"main-page-content\">Kombucha gombaval erjesztett zold tea.</p>\r\n    );\r\n}\r\n\r\nexport default Kombucha;","import React  from 'react';\r\n\r\nconst Kapalabhati = () => {\r\n    return (\r\n        <p className=\"main-page-content\">Kapalabhati pranayama.</p>\r\n    );\r\n}\r\n\r\nexport default Kapalabhati;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Switch, useHistory } from \"react-router-dom\";\r\n\r\nimport Button from './Button';\r\nimport Ginger from './MainPageComponents/Ginger';\r\nimport Ginseng from './MainPageComponents/Ginseng';\r\nimport Kombucha from './MainPageComponents/Kombucha';\r\nimport Kapalabhati from './MainPageComponents/Kapalabhati';\r\n\r\n\r\nconst MainPage = () => {\r\nconst history = useHistory();\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"main-page\">\r\n        <h2 className='title-h'>Thingies I do to increase fire, to help my digestive system</h2>\r\n        <nav className='nav-main'>\r\n          <Link to=\"/main/ginger\" className='nav-main-link'>Ginger</Link>\r\n          <Link to=\"/main/ginseng\" className='nav-main-link'>Ginseng</Link>\r\n          <Link to=\"/main/kombucha\" className='nav-main-link'>Kombucha</Link>\r\n          <Link to=\"/main/kapalabhati\" className='nav-main-link'>Kapalabhati</Link>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route path=\"/main/ginger\">\r\n            <Ginger />\r\n          </Route>\r\n          <Route path=\"/main/ginseng\">\r\n            <Ginseng />\r\n          </Route>\r\n          <Route path=\"/main/kombucha\">\r\n            <Kombucha />\r\n          </Route>\r\n          <Route path=\"/main/kapalabhati\">\r\n            <Kapalabhati />\r\n          </Route>\r\n        </Switch>\r\n        \r\n        <Button buttonName={'Back to the Landing Page'} onClick={() => history.push('/home')} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport Button from './Button';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst NoMatch = () => {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div className='no-match'>\r\n            <p>Path not found.</p>\r\n            <Button buttonName={'Back to Home!'} onClick={() => history.push('/home')}/>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default NoMatch;","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport LandingPage from './components/LandingPage'\r\nimport MainPage from './components/MainPage'\r\nimport NoMatch from './components/NoMatch'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path='/home'>\r\n          <LandingPage />\r\n        </Route>\r\n        <Route path='/main'>\r\n          <MainPage/>\r\n        </Route>\r\n        <Route path=\"*\">\r\n            <NoMatch />\r\n          </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
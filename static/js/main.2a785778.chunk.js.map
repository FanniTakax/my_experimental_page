{"version":3,"sources":["components/Button.js","components/LandingPage.js","components/MainPageComponents/About.js","components/MainPageComponents/Now.js","components/MainPageComponents/Cv.js","components/MainPageComponents/Thoughts/ThoughtForm.js","firebase/firebase.js","components/MainPageComponents/Thoughts/ThoughtSingle.js","components/MainPageComponents/Thoughts.js","components/MainPageComponents/Movies.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","type","onClick","buttonName","LandingPage","history","useHistory","className","push","About","Now","Cv","ThoughtForm","onSubmit","handleFormSubmit","name","value","thought","onChange","handleFormChange","placeholder","rows","cols","required","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ThoughtSingle","key","id","Thoughts","useState","array","ref","once","then","dataSnapshot","forEach","val","thoughtsArray","useEffect","console","log","setThought","tibidubu","e","target","preventDefault","addThought","map","item","Movies","query","setQuery","movies","setMovies","searchMovies","a","url","fetch","res","json","data","results","htmlFor","length","filter","movie","poster_path","title","src","alt","release_date","vote_average","overview","href","MainPage","basename","process","to","path","render","routerProps","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a785778.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\r\n    return (\r\n        <button type=\"button\" onClick={props.onClick}>{props.buttonName}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Button from './Button'\r\n\r\nconst LandingPage = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"landing-page\">\r\n      <h1 className=\"title-h\">You are on my experimental page!</h1>\r\n      <Button buttonName={'Check it out!'} onClick={() => history.push('/main')} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"main-page-content about\">\r\n            <p>:)</p>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst Now = () => {\r\n    return (\r\n        <div className=\"main-page-content\">\r\n            <h2>Professional</h2>\r\n            <p>Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho </p>\r\n            <h2>Educational</h2>\r\n            <p>Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho </p>\r\n            <h2>Hobby</h2>\r\n            <p>Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho </p>\r\n            <h2>Interests</h2>\r\n            <p>Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho Hey ho </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Now;\r\n","import React from 'react';\r\n\r\nconst Cv = () => {\r\n    return (\r\n        <div className=\"main-page-content cv\">\r\n            <p>My CV is coming here</p>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Cv;","import React from 'react';\r\n\r\n\r\nconst ThoughtForm = (props) => {\r\n    return (\r\n        <form className=\"thought-form\" onSubmit={props.handleFormSubmit}>\r\n            \r\n            <textarea className=\"textarea\" name=\"thought\" value={props.thought.thought} onChange={props.handleFormChange} placeholder=\"Write here a thought\" rows=\"7\" cols=\"10\" required></textarea>\r\n            <div className=\"thought-form-div\">\r\n                <input className=\"input thoughts-input\" type=\"text\" name=\"name\" value={props.thought.name} onChange={props.handleFormChange} placeholder=\"Your name\"  required/>\r\n                <button type=\"submit\">Add Thought</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ThoughtForm;","import * as firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBjzIwCtEXCgCxZdHINQWDP01JDGzPFm_8\",\r\n    authDomain: \"aproject-13fd8.firebaseapp.com\",\r\n    databaseURL: \"https://aproject-13fd8.firebaseio.com\",\r\n    projectId: \"aproject-13fd8\",\r\n    storageBucket: \"aproject-13fd8.appspot.com\",\r\n    messagingSenderId: \"214699318623\",\r\n    appId: \"1:214699318623:web:73a3d24da50f4fa981eaea\",\r\n    measurementId: \"G-X72H6LGJBB\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nconst database = firebase.database();\r\n \r\nexport default database;\r\n","import React from 'react';\r\n\r\nconst ThoughtSingle = (props) => {\r\n    return (\r\n     <li className=\"thought-single\" key={props.id}>\r\n        <p className=\"thought-single-p\">{props.thought}</p>\r\n        <span className=\"thought-single-span\">{props.name}</span>\r\n    </li>\r\n    )\r\n}\r\n\r\nexport default ThoughtSingle;","import React, { useState, useEffect } from 'react';\r\nimport ThoughtForm from './Thoughts/ThoughtForm';\r\nimport database from '../../firebase/firebase';\r\nimport ThoughtSingle from './Thoughts/ThoughtSingle';\r\nimport _ from 'lodash';\r\n\r\nconst Thoughts = () => {\r\n    \r\n     \r\n    // Get thoughts data from database\r\n    const getThoughtsArray = () => {\r\n        let array = []\r\n        database.ref('thoughts')\r\n            .once('value')\r\n            .then((dataSnapshot) => { \r\n                dataSnapshot.forEach((thought) => {\r\n                    array.push({\r\n                        id: thought.key,\r\n                        ...thought.val()\r\n                    })\r\n                })\r\n            })   \r\n        return array\r\n    }\r\n    \r\n    const [thoughtsArray, setThoughtsArray] = useState(getThoughtsArray)\r\n\r\n    // After first render, load thought objects from the database\r\n    useEffect(() => {\r\n        console.log({thoughtsArray})    \r\n        console.log(thoughtsArray)\r\n    }, [])\r\n    \r\n\r\n    // props sent to ThoughtsForm ------------------------------------------------------------------------\r\n    const [thought, setThought] = useState({\r\n        thought: '',\r\n        name: ''\r\n    })\r\n    const addThought = (thought, name) => {\r\n        database.ref('thoughts').push({\r\n            thought: thought,\r\n            name: name\r\n        })\r\n    }\r\n    const handleFormChange = (e) => {\r\n        setThought({...thought, [e.target.name]: e.target.value})\r\n    }\r\n    const handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        addThought(thought.thought, thought.name);\r\n        setThought({\r\n            thought: '',\r\n            name: ''\r\n        });\r\n    }\r\n    // ---------------------------------------------------------------------------------------------------------\r\n\r\n    \r\n    const tibidubu = [\r\n        {id: '5', name: 'Fannni', thought: 'This page is constantly evolving, feel free to visit again soon :)'},\r\n        {id: '1', name: 'Lalika', thought: 'vlami valahol valamikor'},\r\n        {id: '2', name: 'Barbie', thought: 'where are my shoes'},\r\n        {id: '3', name: 'Geza', thought: 'fekete bika pata kopog a patika epita koven'},\r\n        {id: '4', name: 'Simonka a cica', thought: 'Prrrrr prrp prrrr prrr grrrrr meeeeeooooooowwwwww wwwweeeeeiiii prrrrrr prrrrr'},\r\n    ]\r\n    console.log({tibidubu})\r\n\r\n    return (\r\n        <div className=\"thoughts main-page-content\">\r\n            <p>You can leave a thought here</p>\r\n            <p>// ... working on the implementation ... //</p>\r\n            <p><small>If you leave a thought now, it will be saved in a database. They will be visible here soon.</small></p>\r\n            <ThoughtForm thought={thought} handleFormChange={handleFormChange} handleFormSubmit={handleFormSubmit} />\r\n            <ul className='thoughts-list'>\r\n                {\r\n                    tibidubu.map((item) => {\r\n                        return <ThoughtSingle id={item.id} name={item.name} thought={item.thought} />\r\n                    })\r\n                }\r\n            </ul>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thoughts;","import React, { useState } from 'react';\r\n\r\nconst Movies = () => {\r\n    const [query, setQuery] = useState('')\r\n    const [movies, setMovies] = useState([])\r\n    \r\n    const searchMovies = async (e) => {\r\n        e.preventDefault()\r\n\r\n\r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=13b13773c8e40b0f6d3c622048ceeef6&language=en-US&query=${query}&page=1&include_adult=false`;\r\n    \r\n        try {\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            console.log(data.results)\r\n            setMovies(data.results)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n    const inputChangeHandler = (e) => {\r\n        setQuery(e.target.value);\r\n    } \r\n\r\n    return (\r\n        <div className=\"movies main-page-content\">\r\n            <h1>Search Movies</h1>\r\n            <form className=\"movies-form\" onSubmit={searchMovies}>\r\n                <label htmlFor=\"query\" className=\"movies-label\">Movie title or keyword</label>\r\n                <input className=\"input movies-input\" type=\"text\" name=\"query\" value={query} onChange={inputChangeHandler} placeholder=\"i. e. Chocolate\" required></input>\r\n                <button className=\"button\" type=\"submit\">SEARCH</button>\r\n            </form>\r\n            \r\n            <div className=\"movie-card-list\">\r\n                {movies.length === 0 ? <p>No movies found yet...</p> : movies.filter(movie => movie.poster_path).map(movie => (\r\n                    <div className=\"movie-card\" key={movie.id}>\r\n                        <h4 className=\"movie-card-title\">{movie.title}</h4>\r\n                        <img className=\"movie-card-img\" \r\n                              src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`} \r\n                              alt={movie.title + ' poster'}\r\n                              />\r\n                        <p><small>RELEASE DATE: {movie.release_date}</small></p>\r\n                        <p><small>RATING: {movie.vote_average}</small></p>\r\n                        <p className=\"description\">{movie.overview}</p>\r\n                    \r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <p><small>This app is using the <a href=\"https://www.themoviedb.org\">https://www.themoviedb.org</a> API</small></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Movies\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Switch, useHistory } from \"react-router-dom\";\r\n\r\nimport Button from './Button';\r\nimport About from './MainPageComponents/About';\r\nimport Now from './MainPageComponents/Now';\r\nimport Cv from './MainPageComponents/Cv';\r\nimport Thoughts from './MainPageComponents/Thoughts';\r\nimport Movies from './MainPageComponents/Movies';\r\n\r\n\r\nconst MainPage = () => {\r\nconst history = useHistory();\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"main-page\">\r\n        <h2 className='title-h title-main'>Fanni's Experimental Page</h2>\r\n        <nav className='nav-main'>\r\n          <Link to=\"/main/about\" className='nav-main-link'>ABOUT</Link>\r\n          <Link to=\"/main/now\" className='nav-main-link'>NOW</Link>\r\n          <Link to=\"/main/curriculum\" className='nav-main-link'>CURRICULUM</Link>\r\n          <Link to=\"/main/thoughts\" className='nav-main-link'>TOUGHTS</Link>\r\n          <Link to=\"/main/movies\" className='nav-main-link'>MOVIES</Link>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route path=\"/main/about\" render={(routerProps) => <About routerProps={routerProps}/>}></Route>\r\n          <Route path=\"/main/now\" render={(routerProps) => <Now routerProps={routerProps}/>} ></Route>\r\n          <Route path=\"/main/curriculum\" render={(routerProps) => <Cv routerProps={routerProps}/>} ></Route>\r\n          <Route path=\"/main/thoughts\" render={(routerProps) => <Thoughts routerProps={routerProps}/>}  ></Route>\r\n          <Route path=\"/main/movies\" render={(routerProps) => <Movies routerProps={routerProps}/>}  ></Route>\r\n        </Switch>\r\n        \r\n        <Button buttonName={'Back to the Landing Page'} onClick={() => history.push('/')} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport LandingPage from './components/LandingPage'\r\nimport MainPage from './components/MainPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route exact path='/' exact render={(routerProps) => <LandingPage routerProps={routerProps}/>}></Route>\r\n        <Route path='/main' render={(routerProps) => <MainPage routerProps={routerProps}/>}></Route>\r\n        <Route component={LandingPage}></Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './firebase/firebase';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Button.js","components/LandingPage.js","components/MainPageComponents/Ginger.js","components/MainPageComponents/Ginseng.js","components/MainPageComponents/Kombucha.js","components/MainPageComponents/Thoughts/ThoughtForm.js","firebase/firebase.js","components/MainPageComponents/Thoughts/ThoughtSingle.js","components/MainPageComponents/Thoughts.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","type","onClick","buttonName","LandingPage","history","useHistory","className","push","Ginger","Ginseng","Kombucha","ThoughtForm","onSubmit","handleFormSubmit","htmlFor","name","value","thought","onChange","handleFormChange","placeholder","rows","cols","required","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ThoughtSingle","console","log","thoughtsArray","array","list","map","item","Thoughts","useState","ref","once","then","dataSnapshot","forEach","id","key","val","getThoughtsArray","useEffect","setThought","e","target","preventDefault","addThought","MainPage","basename","process","to","path","render","routerProps","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.abbe61d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\r\n    return (\r\n        <button type=\"button\" onClick={props.onClick}>{props.buttonName}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Button from './Button'\r\n\r\nconst LandingPage = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"landing-page\">\r\n      <h1 className=\"title-h\">You are on my experimental page!</h1>\r\n      <Button buttonName={'Check it out!'} onClick={() => history.push('/main')} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\r\n\r\nconst Ginger = () => {\r\n    return (\r\n        <p className=\"main-page-content\">Ginger root is yummy.</p>\r\n    );\r\n}\r\n\r\nexport default Ginger;\r\n","import React from 'react';\r\n\r\nconst Ginseng = () => {\r\n    return (\r\n        <p className=\"main-page-content\">Ginzeng, az ero bennem megin zeng.</p>\r\n    );\r\n}\r\n\r\nexport default Ginseng;\r\n","import React from 'react';\r\n\r\nconst Kombucha = () => {\r\n    return (\r\n        <p className=\"main-page-content\">Tea.</p>\r\n    );\r\n}\r\n\r\nexport default Kombucha;","import React from 'react';\r\n\r\n\r\nconst ThoughtForm = (props) => {\r\n\r\n  \r\n\r\n    return (\r\n        <form className=\"thought-form\" onSubmit={props.handleFormSubmit}>\r\n            <label htmlFor=\"thought\">Write a thought and leave it here to inspire us: </label>\r\n            <textarea name=\"thought\" value={props.thought.thought} onChange={props.handleFormChange} placeholder=\"Write here a thought\" rows=\"7\" cols=\"40\" required></textarea>\r\n            <input type=\"text\" name=\"name\" value={props.thought.name} onChange={props.handleFormChange} placeholder=\"Your name\" />\r\n            <button type=\"submit\">Add Thought</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ThoughtForm;","import * as firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBjzIwCtEXCgCxZdHINQWDP01JDGzPFm_8\",\r\n    authDomain: \"aproject-13fd8.firebaseapp.com\",\r\n    databaseURL: \"https://aproject-13fd8.firebaseio.com\",\r\n    projectId: \"aproject-13fd8\",\r\n    storageBucket: \"aproject-13fd8.appspot.com\",\r\n    messagingSenderId: \"214699318623\",\r\n    appId: \"1:214699318623:web:73a3d24da50f4fa981eaea\",\r\n    measurementId: \"G-X72H6LGJBB\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nconst database = firebase.database();\r\n \r\nexport default database;\r\n","import React/*, { useState, useEffect }*/ from 'react';\r\n\r\nconst ThoughtSingle = (props) => {\r\n    console.log(props.thoughtsArray)\r\n    const array = props.thoughtsArray\r\n    console.log(array)\r\n    /*const list = props.thoughtsArray.map((item) => {\r\n        return <li> {item.name} </li>;\r\n    })*/\r\n\r\n    const list = array.map((item) => <li>hello</li>)\r\n\r\n    return (\r\n     <ul className=\"thoughts-render\">\r\n        {list}\r\n     </ul>\r\n    )\r\n}\r\n\r\n/*<li key={thought.id}><span>{thought.thought}</span><span>{thought.name}</span></li>)*/\r\n\r\nexport default ThoughtSingle;","import React, { useState, useEffect } from 'react';\r\nimport ThoughtForm from './Thoughts/ThoughtForm';\r\nimport database from '../../firebase/firebase';\r\nimport ThoughtSingle from './Thoughts/ThoughtSingle';\r\n\r\nconst Thoughts = () => {\r\n      // Get thoughts data from database\r\n      const getThoughtsArray = () => {\r\n        const array = []\r\n        database.ref('thoughts')\r\n            .once('value')\r\n            .then((dataSnapshot) => { \r\n                dataSnapshot.forEach((thought) => {\r\n                    array.push({\r\n                        id: thought.key,\r\n                        ...thought.val()\r\n                    })\r\n                })\r\n            })   \r\n        return array\r\n    }\r\n\r\n    const [thoughtsArray, setThoughtsArray] = useState(getThoughtsArray())\r\n\r\n    // After first render, load thought objects from the database\r\n    useEffect(() => {\r\n        console.log(thoughtsArray)       \r\n    }, [])\r\n\r\n\r\n    // props sent to ThoughtsForm\r\n    const [thought, setThought] = useState({\r\n        thought: '',\r\n        name: ''\r\n    })\r\n    const addThought = (thought, name) => {\r\n        database.ref('thoughts').push({\r\n            thought: thought,\r\n            name: name\r\n        })\r\n    }\r\n    const handleFormChange = (e) => {\r\n        setThought({...thought, [e.target.name]: e.target.value})\r\n    }\r\n    const handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        addThought(thought.thought, thought.name);\r\n        setThought({\r\n            thought: '',\r\n            name: ''\r\n        });\r\n    }\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div className=\"thoughts\">\r\n            <ThoughtForm thought={thought} handleFormChange={handleFormChange} handleFormSubmit={handleFormSubmit} />\r\n            <ThoughtSingle thoughtsArray={thoughtsArray} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thoughts;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Switch, useHistory } from \"react-router-dom\";\r\n\r\nimport Button from './Button';\r\nimport Ginger from './MainPageComponents/Ginger';\r\nimport Ginseng from './MainPageComponents/Ginseng';\r\nimport Kombucha from './MainPageComponents/Kombucha';\r\nimport Thoughts from './MainPageComponents/Thoughts';\r\n\r\n\r\nconst MainPage = () => {\r\nconst history = useHistory();\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"main-page\">\r\n        <h2 className='title-h'>Thingies I do</h2>\r\n        <nav className='nav-main'>\r\n          <Link to=\"/main/ginger\" className='nav-main-link'>Ginger</Link>\r\n          <Link to=\"/main/ginseng\" className='nav-main-link'>Ginseng</Link>\r\n          <Link to=\"/main/kombucha\" className='nav-main-link'>Kombucha</Link>\r\n          <Link to=\"/main/thoughts\" className='nav-main-link'>Leave a Thought!</Link>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route path=\"/main/ginger\" render={(routerProps) => <Ginger routerProps={routerProps}/>}></Route>\r\n          <Route path=\"/main/ginseng\" render={(routerProps) => <Ginseng routerProps={routerProps}/>} ></Route>\r\n          <Route path=\"/main/kombucha\" render={(routerProps) => <Kombucha routerProps={routerProps}/>} ></Route>\r\n          <Route path=\"/main/thoughts\" render={(routerProps) => <Thoughts routerProps={routerProps}/>}  ></Route>\r\n        </Switch>\r\n        \r\n        <Button buttonName={'Back to the Landing Page'} onClick={() => history.push('/')} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport LandingPage from './components/LandingPage'\r\nimport MainPage from './components/MainPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route exact path='/' exact render={(routerProps) => <LandingPage routerProps={routerProps}/>}></Route>\r\n        <Route path='/main' render={(routerProps) => <MainPage routerProps={routerProps}/>}></Route>\r\n        <Route component={LandingPage}></Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './firebase/firebase';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}